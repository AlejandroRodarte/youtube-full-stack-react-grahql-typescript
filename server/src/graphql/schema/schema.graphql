type Query {
  posts(data: PostsInput!, namespace: String!): PostsResponse!
  post(data: PostInput!, namespace: String!): PostResponse!
  me(namespace: String!): MeResponse!
}

type PostsResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: PostsData
  errors: [FieldError!]
}

type PostsData {
  posts: [PostDto!]!
  hasMore: Boolean!
}

type PostDto {
  id: Int!
  title: String!
  text: String!
  points: Int!
  originalPosterId: Int!
  trendingScore: Int!
  createdAt: String!
  updatedAt: String!
  textSnippet: String!
  userVoteStatus: Int
  originalPoster: UserDto
  updoots: [UpdootDto!]
}

type UserDto {
  id: Int!
  username: String!
  email: String
  createdAt: String!
  updatedAt: String!
  posts: [PostDto!]
  updoots: [UpdootDto!]
}

type UpdootDto {
  userId: Int!
  postId: Int!
  value: Int!
  createdAt: String!
  updatedAt: String!
  user: UserDto
  post: PostDto
}

type FieldError {
  path: String!
  type: String!
  label: String!
  message: String!
}

input PostsInput {
  limit: Int!
  sort: String!
  timestamp: String!
  excludeIds: [Int!]
  cursor: String
}

type PostResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: PostData
  errors: [FieldError!]
}

type PostData {
  post: PostDto!
}

input PostInput {
  id: Int!
}

type MeResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: MeData
  errors: [FieldError!]
}

type MeData {
  user: UserDto!
}

type Mutation {
  addPost(data: AddPostInput!, namespace: String!): AddPostResponse!
  editPost(data: EditPostInput!, namespace: String!): EditPostResponse!
  deletePost(data: DeletePostInput!, namespace: String!): DeletePostResponse!
  register(data: RegisterInput!, namespace: String!): RegisterResponse!
  login(data: LoginInput!, namespace: String!): LoginResponse!
  logout(namespace: String!): LogoutResponse!
  changePassword(data: ChangePasswordInput!, namespace: String!): ChangePasswordResponse!
  forgotPassword(data: ForgotPasswordInput!, namespace: String!): ForgotPasswordResponse!
  vote(data: VoteInput!, namespace: String!): VoteResponse!
}

type AddPostResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: AddPostData
  errors: [FieldError!]
}

type AddPostData {
  newPost: PostDto!
}

input AddPostInput {
  title: String!
  text: String!
}

type EditPostResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: EditPostData
  errors: [FieldError!]
}

type EditPostData {
  updatedPost: EditedPostDto!
}

type EditedPostDto {
  id: Int!
  title: String!
  text: String!
}

input EditPostInput {
  id: Int!
  fields: OptionalPostFieldsInput!
}

input OptionalPostFieldsInput {
  title: String
  text: String
}

type DeletePostResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: DeletePostData
  errors: [FieldError!]
}

type DeletePostData {
  id: Int!
}

input DeletePostInput {
  id: Int!
}

type RegisterResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: RegisterData
  errors: [FieldError!]
}

type RegisterData {
  newUser: UserDto!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type LoginResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: LoginData
  errors: [FieldError!]
}

type LoginData {
  user: UserDto!
}

input LoginInput {
  credential: String!
  password: String!
}

type LogoutResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: LogoutData
  errors: [FieldError!]
}

type LogoutData {
  wasSessionDestroyed: Boolean!
}

type ChangePasswordResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: ChangePasswordData
  errors: [FieldError!]
}

type ChangePasswordData {
  updatedUser: UserDto!
}

input ChangePasswordInput {
  token: String!
  form: ChangePasswordFormInput!
}

input ChangePasswordFormInput {
  newPassword: String!
}

type ForgotPasswordResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: ForgotPasswordData
  errors: [FieldError!]
}

type ForgotPasswordData {
  wasEmailSent: Boolean!
}

input ForgotPasswordInput {
  email: String!
}

type VoteResponse {
  timestamp: String!
  status: Int!
  message: String!
  code: String!
  namespace: String
  data: VoteData
  errors: [FieldError!]
}

type VoteData {
  postPoints: Int!
  updoot: UpdootDto
}

input VoteInput {
  postId: Int!
  value: Int!
}
