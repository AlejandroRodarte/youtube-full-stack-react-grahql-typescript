type Query {
  posts: GetPostsResponse!
  post(data: PostInput!): GetPostResponse!
  me: MeUserResponse!
}

type GetPostsResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: GetPostsData
  errors: [FieldError!]
}

type GetPostsData {
  posts: [Post!]!
}

type Post {
  id: Float!
  createdAt: String!
  updatedAt: String!
  title: String!
}

type FieldError {
  path: String!
  type: String!
  label: String!
  message: String!
}

type GetPostResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: GetPostData
  errors: [FieldError!]
}

type GetPostData {
  post: Post!
}

input PostInput {
  id: Int!
}

type MeUserResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: MeUserData
  errors: [FieldError!]
}

type MeUserData {
  user: User!
}

type User {
  id: Float!
  createdAt: String!
  updatedAt: String!
  username: String!
  email: String!
}

type Mutation {
  addPost(data: AddPostInput!): AddPostResponse!
  editPost(data: EditPostInput!): EditPostResponse!
  deletePost(data: DeletePostInput!): DeletePostResponse!
  register(data: RegisterInput!): RegisterUserResponse!
  login(data: LoginInput!): LoginUserResponse!
  logout: LogoutUserResponse!
  forgotPassword(data: ForgotPasswordInput!): ForgotPasswordResponse!
  changePassword(data: ChangePasswordInput!): ChangePasswordResponse!
}

type AddPostResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: AddPostData
  errors: [FieldError!]
}

type AddPostData {
  newPost: Post!
}

input AddPostInput {
  title: String!
}

type EditPostResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: EditPostData
  errors: [FieldError!]
}

type EditPostData {
  updatedPost: Post!
}

input EditPostInput {
  id: Int!
  fields: OptionalPostFieldsInput!
}

input OptionalPostFieldsInput {
  title: String
}

type DeletePostResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: DeletePostData
  errors: [FieldError!]
}

type DeletePostData {
  id: Int!
}

input DeletePostInput {
  id: Int!
}

type RegisterUserResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: RegisterUserData
  errors: [FieldError!]
}

type RegisterUserData {
  newUser: User!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type LoginUserResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: LoginUserData
  errors: [FieldError!]
}

type LoginUserData {
  user: User!
}

input LoginInput {
  credential: String!
  password: String!
}

type LogoutUserResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: LogoutUserData
  errors: [FieldError!]
}

type LogoutUserData {
  wasSessionDestroyed: Boolean!
}

type ForgotPasswordResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: ForgotPasswordData
  errors: [FieldError!]
}

type ForgotPasswordData {
  wasEmailSent: Boolean!
}

input ForgotPasswordInput {
  email: String!
}

type ChangePasswordResponse {
  status: Int!
  message: String!
  code: String!
  _kind: String
  data: ChangePasswordData
  errors: [FieldError!]
}

type ChangePasswordData {
  updatedUser: User!
}

input ChangePasswordInput {
  token: String!
  form: ChangePasswordFormInput!
}

input ChangePasswordFormInput {
  newPassword: String!
}
