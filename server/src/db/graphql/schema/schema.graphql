type Query {
  hello: String!
  posts: GetPostsResponse!
  post(id: Int!): GetPostResponse!
}

type GetPostsResponse {
  status: Int!
  message: String!
  data: GetPostsData!
}

type GetPostsData {
  posts: [Post!]!
}

type Post {
  id: Float!
  createdAt: String!
  updatedAt: String!
  title: String!
}

type GetPostResponse {
  status: Int!
  message: String!
  data: GetPostData!
}

type GetPostData {
  post: Post!
}

type Mutation {
  addPost(data: AddPostInput!): AddPostResponse!
  editPost(data: EditPostInput!, id: Int!): EditPostResponse!
  deletePost(id: Int!): DeletePostResponse!
  register(data: RegisterUserInput!): RegisterUserResponse!
}

type AddPostResponse {
  status: Int!
  message: String!
  data: AddPostData!
}

type AddPostData {
  newPost: Post!
}

input AddPostInput {
  title: String!
}

type EditPostResponse {
  status: Int!
  message: String!
  data: EditPostData!
}

type EditPostData {
  updatedPost: Post!
}

input EditPostInput {
  title: String
}

type DeletePostResponse {
  status: Int!
  message: String!
  data: DeletePostData!
}

type DeletePostData {
  id: Int!
}

type RegisterUserResponse {
  status: Int!
  message: String!
  data: RegisterUserData!
}

type RegisterUserData {
  newUser: User!
}

type User {
  id: Float!
  createdAt: String!
  updatedAt: String!
  username: String!
}

input RegisterUserInput {
  username: String!
  password: String!
}
